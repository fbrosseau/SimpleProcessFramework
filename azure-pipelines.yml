trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  verbosity: 'normal'
  netcoreName: 'netcoreapp2.1'
  netfxName: 'net48'
  windowsImage: 'windows-2019'

strategy:
  matrix:
    windows:
      imageName: 'windows-2019'
      buildConfiguration: 'Release'
    #linux:
    #  imageName: 'ubuntu-16.04'
    #  buildConfiguration: 'Netcore_Release'

pool:
  vmImage: $(imageName)

steps:
- task: NuGetToolInstaller@0

- task: DotNetCoreInstaller@0
  displayName: 'Install .net core 2.1.x'
  inputs:
    version: '2.1.300'

- task: DotNetCoreInstaller@0
  displayName: 'Install .net core 3.0.x'
  inputs:
    version: '3.0.100'

- task: DotNetCoreCLI@2
  displayName: 'Main Build without tests'
  inputs:
    command: build
    projects: 'SimpleProcessFramework.sln'
    arguments: '-c $(buildConfiguration)_NoTests -v $(verbosity)'

#- task: DotNetCoreCLI@2
#  displayName: 'Full Build'
#  inputs:
#    command: build
#    projects: 'SimpleProcessFramework.sln'
#    arguments: '-c $(buildConfiguration) -v $(verbosity)'
#
#- task: DotNetCoreCLI@2
#  displayName: 'Run tests (netcore)'
#  continueOnError: true
#  inputs:
#    command: test
#    projects: 'Spfx.Tests'
#    buildConfiguration: '$(buildConfiguration)'
#    testRunTitle: '$(buildConfiguration) $(netcoreName)'
#    arguments: '-c $(buildConfiguration) -f $(netcoreName) -v $(verbosity)'
#
#- task: DotNetCoreCLI@2
#  displayName: 'Run tests (netfx)'
#  continueOnError: true
#  condition: eq(variables['imageName'], variables['windowsImage'])
#  inputs:
#    command: test
#    projects: 'SimpleProcessFramework.sln'
#    buildConfiguration: '$(buildConfiguration)'
#    testRunTitle: '$(buildConfiguration) $(netfxName)'
#    arguments: '-c $(buildConfiguration) -f $(netfxName) -v $(verbosity)'

- task: NuGetAuthenticate@0
  inputs:
    nuGetServiceConnections: 'Github-Packages'

- script: echo $(Build.Repository.LocalPath)/nuspec/*.nupkg

- task: NuGetCommand@2
  displayName: 'Nuget Push'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.Repository.LocalPath)/nuspec/*.nupkg;!$(Build.Repository.LocalPath)/nuspec/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'Github-Packages'
    verbosityPush: 'Detailed'